extends layout

block content
  - var docs = JSON.parse(definition || '[]');

  - function displayText(txt) {
  -   return txt.replace(/\n/g, '<br/>');
  - }

  
  - var info = logs.filter(l=>l.type === 'info');
  - function prettyDate(dateStr) {

    - if (!dateStr) return '';
    - var date = new Date(dateStr);
    - var date1=new Date(instance.startedAt);
    - //if (isNaN(date.getTime())) return dateStr;
    - var d = date.getDate();
    - var m = date.getMonth() + 1; // Months are zero-based
    - var y = date.getFullYear();
    - var h = date.getHours();
    - var mm = date.getMinutes();
    - var s = date.getSeconds();
    
    - var val= `${d}/${m}/${y} ${h}:${mm}:${s}`;
    - 
    - return val;
  - }
  
  div(style="border-bottom: 1px solid #999; padding-bottom: 10px; overflow: hidden;")
    h1(style="float:left;")
      span #{title}
    span(id='Details-block', font-size='10px')

  script(type="text/javascript").
    var jsonData = !{definition};	
    var decorations = !{decorations};	
    var startDate = new Date("!{instance.startedAt}");
    
  script(type="text/javascript").
    function showDocs() {
      var dv = document.getElementById("docs");
      var button = document.getElementById("showDoc");
      if (dv.style.display === "none") {
        dv.style.display = "block";
        button.innerHTML="&uarr;";
      } else {
        dv.style.display = "none";
        button.innerHTML="&darr;";
      }
    }
    
    function showLogs() {
      var dv = document.getElementById("logs");
      var button = document.getElementById("showHide");
      if (dv.style.display === "none") {
        dv.style.display = "block";
        button.innerHTML="&uarr;";
      } else {
        dv.style.display = "none";
        button.innerHTML="&darr;";
      }
    }
    
    document.addEventListener("DOMContentLoaded", function () {
      var lines = document.querySelectorAll("#logs table tr td");
      lines.forEach(function(td) {
        if (td.textContent.startsWith('debug:')) {
          td.style.color = "green";
        }
        if (td.textContent.startsWith('log:Action:')) {
          td.style.fontWeight = "bold";
          td.style.fontSize = "14px";
        }
      });
    });

  div(id="instances")
    h4 Instance Information 
    - let lastAt = lastItem.endedAt || lastItem.startedAt;
    table
      tr 
        td name:
        td #{instance.name}
        td id:
        td #{instance.id}
      tr
        td started At
        td #{prettyDate(instance.startedAt)}
        td ended At
        td #{prettyDate(instance.endedAt)}
      tr
        td lastAt
        td #{prettyDate(lastAt)}
      tr
        td lastItem
        td #{lastItem.elementId}
        td last status
        td #{lastItem.status}

    h4 Instance Data 
    table
      each v in (vars || [])
        tr
          td #{v.key}
          td #{v.value}

    div!= svg
    script(type="application/json" id="jsonInfo") 
      != JSON.stringify(info)

    <button id="showTokens" onclick="$('.decor-token').toggle()">Show Tokens</button>  
    <button id="startAnimation" onclick="startAnimation()">Show Animation</button> 
    <!--button id="continueBtn" onclick="continueAnimation()">Continue Animation</button--> 
    h4 Model Documentation <button id="showDoc" onclick="showDocs()">&darr;</button>  
    
    div(id="docs" style="display:none; border-width:.5px; border-style: solid; border-color: aliceblue; background: #f7f7f3;") 
      include includes/modelDoc.pug

    h4(style="display:none;") Instance History
      table#dataTable
        each inf in (info || [])
          tr
            - 
              let o = null;
              try {
                const cleanMessage = inf.message.replaceAll(`'`, `"`);
                if (cleanMessage.startsWith('{') || cleanMessage.startsWith('[')) {
                  o = JSON.parse(cleanMessage);
                }
              } catch (e) {
                console.log('JSON parse error for message:', inf.message);
              }
            if (o && o.type==='execution')
              td(style="white-space:nowrap",colspan="2") Execution
              td #{o.label}
              td #{JSON.stringify(o.inputData)}
              td #{JSON.stringify(o.options)}
            else if (o)
              td 
              td(style="white-space:nowrap") # #{o.seq+1} #{o.id} 
              td #{o.action}
              td #{o.userName}
              td #{o.id||''+'-'+o.itemId||''}
            else
              td(style="white-space:nowrap",colspan="5") #{inf.message} 
            

    h4 Instance Items
    span Times shown are from the start of the Execution
    table#dataTable
      thead
        tr
          th Seq #
          th Element Id
          th Name
          th Started
          th Ended
          th Status
          th Type
          th User
          th Action
          th Assignee
          th Candidate Users
          th Candidate Groups
          th Due date
          th Follow-up date
          th Priority
      tbody
        - let seq = 0;
        each item in (items || [])
          - var ref = `?id=${item.id}&processName=${instance.name}&elementId=${item.elementId}`;
          - var label = (item.status === 'wait' && item.type === 'bpmn:UserTask') ? 'Execute' : '';
          - var label2 = (item.status === 'wait' && item.type === 'bpmn:UserTask') ? 'Assign' : '';
          - if (user && user.isAdmin() && item.status === 'wait' && item.type.includes('Event')) label = 'Force';
          - var assign = [];
          - if (item.candidateUsers) assign.push(`Assigned to users: '${item.candidateUsers}'`);
          - if (item.candidateGroups) assign.push(`Groups: '${item.candidateGroups}'`);
          - if (item.assignee) assign.push(`Assigned to: '${item.assignee}'`);
          - if (item.dueDate) assign.push(`Due on: ${prettyDate(item.dueDate)}`);
          - var key = item.itemKey ? `[${item.itemKey}]` : '';
          - seq++;
          tr
            td #{seq}
            td #{item.elementId}
            td #{item.name} #{key}
            td(class='date') #{(item.startedAt)}
            td(class='date') #{(item.endedAt)}
            td #{item.status}
            td #{item.type}
            td #{item.userName}
            td
              if (label)
                a(href=`/invokeItem${ref}`, style="border: solid #bbb7d8; padding: 2px; background: #f3eaea; font-weight: 700; margin:2px")
                  span(style="width:60px;") #{label} 
                a(href=`/assign${ref}`, style="border: solid #bbb7d8; padding: 2px; background: #f3eaea; font-weight: 700;") 
                  span  #{label2}
            td #{item.assignee}
            td #{item.candidateUsers}
            td #{item.candidateGroups}
            td #{prettyDate(item.dueDate)}
            td #{prettyDate(item.followUpDate)}
            td #{item.priority}


    div(id="info",style='display:none;') 
      table(style='width:100%')
        each log in (logs || [])
          if (log.type === 'info')
            tr
              td(style="width:1%; white-space:nowrap") #{prettyDate(log.date)}
              td #{log.message}

    h4 Instance Logs <button id="showHide" onclick="showLogs()">&darr;</button>
    div(id="logs" style="display:none;") 
      table(style='width:100%')
        each log in (logs || [])
          tr
            td(style="white-space:nowrap") #{prettyDate(log.date)}
            td #{log.message}
